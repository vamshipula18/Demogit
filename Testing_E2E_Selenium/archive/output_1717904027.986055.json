{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'invokebrowser' for <Function test_e2e>>\n\n    @pytest.fixture(scope=\"class\")\n    def invokebrowser(request):\n        global driver\n        browser_name = request.config.getoption(\"browser_name\")\n        if browser_name == \"chrome\":\n            ser_chrome = Service(\"E:/chromedriver-win64/chromedriver.exe\")\n            driver = webdriver.Chrome(service=ser_chrome)\n        elif browser_name == \"firefox\":\n            ser_firefox = Service(\"E:/geckodriver-v0.34.0-win-aarch64/geckodriver.exe\")\n>           driver = webdriver.Firefox(service=ser_firefox)\n\ntests\\conftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:62: in __init__\n    self.service.start()\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:98: in start\n    self._start_process(self._path)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:208: in _start_process\n    self.process = subprocess.Popen(\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['E:/geckodriver-v0.34.0-win-aarch64/geckodri...>\nargs = 'E:/geckodriver-v0.34.0-win-aarch64/geckodriver.exe --port=50323', executable = None, preexec_fn = None\nclose_fds = False, pass_fds = (), cwd = None\nenv = environ({'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'APPDATA': 'C:\\\\Users\\\\vamsh\\\\AppData\\\\Roaming', 'COMMONPROGRAMFILES': ...ENABLE_SYSMAN': '1', 'PYTEST_VERSION': '8.2.1', 'PYTEST_CURRENT_TEST': 'tests/test_e2e.py::TestOne::test_e2e (setup)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x000001F81B1E22D0>, creationflags = 0, shell = False\np2cread = Handle(1016), p2cwrite = 16, c2pread = -1, c2pwrite = Handle(744), errread = -1, errwrite = Handle(932)\nunused_restore_signals = True, unused_gid = None, unused_gids = None, unused_uid = None, unused_umask = -1\nunused_start_new_session = False, unused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            if not executable:\n                # gh-101283: without a fully-qualified path, before Windows\n                # checks the system directories, it first looks in the\n                # application directory, and also the current directory if\n                # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                # to avoid executing unqualified \"cmd.exe\".\n                comspec = os.environ.get('ComSpec')\n                if not comspec:\n                    system_root = os.environ.get('SystemRoot', '')\n                    comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                    if not os.path.isabs(comspec):\n                        raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                if os.path.isabs(comspec):\n                    executable = comspec\n            else:\n                comspec = executable\n    \n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    OSError: [WinError 216] This version of %1 is not compatible with the version of Windows you're running. Check your computer's system information and then contact the software publisher\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:1538: OSError\n", "test_name": "test_e2e", "rerun": "0"}}, "suite_name": "tests/test_e2e.py"}}}, "date": "June 09, 2024", "start_time": 1717903694.0184379, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}